{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Weird JavaScript Notes","text":"Weird JavaScript Notes <p>     My lifelong notes about the weird \ud83d\ude35\u200d\ud83d\udcab and wild \ud83e\udd2a features of JavaScript!      Explore the docs \u00bb React JS Docs     \u00b7     JavaScript Cheat Sheet     \u00b7     React Cheat Sheet </p> \ud83d\udcd4 Table of Contents <ol> <li> \ud83d\udcc4 About The Project 1a <ul> <li>\ud83d\udce3README Template</li> </ul> </li> <li> \ud83d\udcc4 Decoupling Object Properties 2a <ul> <li>2a \u25b6\ufe0fExample</li> <li>2a \ud83d\udca1Description</li> </ul> </li> <li> \ud83d\udcc4 Immediately Invoked Function Expression 3a <ul> <li>3a \u25b6\ufe0fExample</li> <li>3a \ud83d\udca1Description</li> </ul> 3b <ul> <li>3b \u25b6\ufe0fExample</li> <li>3b \ud83d\udca1Description</li> </ul> </li> </ol>"},{"location":"#about-the-project","title":"About The Project","text":"<p>\u2003\u2003\u2003Hello! I'm Colston D. Bod-oy; I'm a React and Android developer, and I would be taking my 3rd year of college at the time that I made this repo. I'm an aspiring developer, and I would like to work for the big FAANG companies someday \ud83d\ude09.  </p> <p>\u2003\u2003\u2003I created this project so I could keep track of and recall things that I didn't know I could do in JavaScript, as I've just recently started learning it on a deeper level. I hope you'll find these notes useful! \ud83d\ude0e.</p>"},{"location":"#readme-template","title":"README Template","text":"<p>Btw, here's where I got this template. Also, don't forget to follow me on my social media links.</p> <p>\ud83d\udc49 \ud83d\udcd2</p> <p>(back to top \u2934\ufe0f)</p>"},{"location":"#decoupling-object-properties","title":"Decoupling Object Properties","text":"<p>\u2003\u2003\u2003We could decouple object properties and use their values as properties of another object.</p>"},{"location":"#2a-example","title":"2a Example","text":"<p> Notice how we use the bracket notation instead of the dot notation for the last 2 properties of the cast object. It's because the decoupled values are not valid <code>JavaScript</code> identifiers (for example, a property name that has a space or a hyphen, or that starts with a number).</p> <pre><code>const spells = {\n  basic: \"fire\",\n  special: \"high voltage\",\n  ultimate: \"\ud83d\udca7\",\n}\n\nconst cast = {\n  [spells.basic]: \"\ud83d\udd25\",\n  [spells.special]: \"\u26a1\",\n  [spells.ultimate]: \"\ud83c\udf0a\",\n}\n\nconsole.log(cast.fire);            // \ud83d\udd25\nconsole.log(cast[\"high voltage\"]); // \u26a1\nconsole.log(cast[\"\ud83d\udca7\"]);           // \ud83c\udf0a\n</code></pre>"},{"location":"#2a-description","title":"2a Description","text":"<p> Below is a basic example of how we could use this feature when working with React's <code>useReducer</code> hook.</p> <pre><code>const initialState = {\n  username: \"\",\n  password: \"\",\n}\n\nexport default function LoginForm() {\n  const [state, dispatch] = useReducer((state, action) =&gt; {\n    switch (action.type) {\n      case \"TEXT_FIELD\":\n        // Decoupling fieldType property from dispatch\n        return { ...state, [action.fieldType]: action.payload }; \n      default:\n        return state;\n    }\n  }, initialState);\n\n  const { username, password } = state;\n\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;form className=\"form\"&gt;\n        &lt;p&gt;Please Login!&lt;/p&gt;\n        &lt;input \n          type=\"text\" \n          value={username} \n          onChange={(e) =&gt; \n            dispatch({ \n              type: \"TEXT_FIELD\", \n              fieldType: \"username\", \n              payload: e.currentTarget.value, \n            })\n          }\n        /&gt;\n        &lt;input \n          type=\"password\" \n          value={password} \n          onChange={(e) =&gt; \n            dispatch({ \n              type: \"TEXT_FIELD\", \n              fieldType: \"password\", \n              payload: e.currentTarget.value, \n            })\n          }\n        /&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>(back to top \u2934\ufe0f)</p>"},{"location":"#immediately-invoked-function-expression","title":"Immediately Invoked Function Expression","text":"<p>\u2003\u2003\u2003We can create and call a function expression at the same time.</p>"},{"location":"#3a-example","title":"3a Example","text":"<p> Notice the different ways we can create an <code>IIFE</code>. For an <code>IIFE</code> to work, we first needed to change the context of the function keyword to be an expression, either by enclosing it inside parentheses or using operators. Note that the <code>!</code> operator will negate the returned boolean value of the <code>IIFE</code>, and if the expression doesn't return anything, it will just result in true, while the <code>+</code> operator will try to add the returned value, but since it will always have no value on the left-hand side of the operator, no further actions will be executed.</p> <pre><code>var functionEx;\n(functionEx = function() {\n  console.log(\"\u2714\ufe0f\")\n})(); // \u2714\ufe0f\n\n(function() {\n  console.log(\"\u2714\ufe0f\")\n})(); // \u2714\ufe0f\n\n!function() {\n  console.log(\"\u2714\ufe0f\")\n}(); // \u2714\ufe0f\n\n+function() {\n  console.log(\"\u2714\ufe0f\")\n}(); // \u2714\ufe0f\n</code></pre>"},{"location":"#3a-description","title":"3a Description","text":"<p> If your code doesn't support <code>ES6</code>, you can't use the new <code>let</code> and <code>const</code> keywords for creating block-scoped local variables. You'll have to resort to the classic function scoping offered by <code>IIFEs</code>.</p> <pre><code>{\n  let part = \"\ud83e\uddbe\";\n  console.log(part); // \ud83e\uddbe\n}\n\npart; // ReferenceError: part is not defined\n\n(function() {\n  var part = \"\ud83e\uddbe\";\n  console.log(part);\n})(); // \ud83e\uddbe\n\npart; // ReferenceError: part is not defined\n</code></pre> <p>(back to top \u2934\ufe0f)</p>"},{"location":"#3b-example","title":"3b Example","text":"<p> <code>IIFEs</code> can also be used to manage private data by returning functions that create closures for the local variables.</p> <pre><code>const robot = (function() {\n  let part = \"\u2699\ufe0f\";\n  return {\n    getPart: () =&gt; part,\n    setPart: (newPart) =&gt; part = newPart\n  };\n})();\n\nconsole.log(robot.getPart()); // \u2699\ufe0f\nrobot.setPart(\"\ud83e\udd16\");\nconsole.log(robot.getPart()); // \ud83e\udd16\n</code></pre>"},{"location":"#3b-description","title":"3b Description","text":"<p> Let's say you're using <code>jQuery</code> and another library that also assigns to the <code>$</code> global variable. We can resolve this naming conflict by wrapping the other piece of code with an <code>IIFE</code> that uses <code>$</code> as a parameter name. We can also do a similar thing if we want to capture the global object, no matter where we run our code. For example, the global object in the browser is window, while <code>Node.js</code> uses global. Aliasing variable names can also be used to optimize code so that it can be minified more efficiently. A <code>JavaScript</code> minifier like <code>UglifyJS</code> can shorten the function's parameter names to single-letter identifiers.</p> <pre><code>window.$ = function somethingElse() {\n  // ...\n};\n\n(function($) {\n  // ...\n})(jQuery);\n\n(function(global) {\n  // ...\n})(this);\n\n(function(window, document, undefined) {\n  // ...\n})(window, document);\n\n(function(w, d, u) {\n  // ...\n})(window, document);\n</code></pre> <p> Not having the <code>let</code> keyword in <code>ES6</code> can also cause unexpected results when running asynchronous tasks inside a loop, as the value for <code>i</code> would immediately be changed until the loop condition wasn't fulfilled anymore. We can use <code>IIFEs</code> again in this case.</p> <pre><code>for (var i = 0; i &lt; 3; i++) {\n  setTimeout(() =&gt; console.log(`Current index: ${i}`), 100);\n  // Current index: 3\n  // Current index: 3\n  // Current index: 3\n}\n\nfor (var i = 0; i &lt; 3; i++) {\n  (function(index) {\n    setTimeout(() =&gt; console.log(`Current index: ${index}`), 100);\n  })(i);\n  // Current index: 0\n  // Current index: 1\n  // Current index: 2\n}\n</code></pre> <p>(back to top \u2934\ufe0f)</p>"}]}